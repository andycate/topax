#version 330 core

out vec4 fragColor;

uniform vec2 _iResolution;
uniform uint _maxSteps;
uniform vec3 _camPose;
uniform vec3 _lookingAt;
uniform vec3 _camUp;
uniform float _fx;
uniform float _stopEpsilon;
uniform float _tmax;

const vec3 sdf_colors[1] = vec3[1](vec3(0.3, 0.6, 0.8));

const float R_lmn[145] = float[145](-2.07405992e-09, -4.68280558e-10, -1.88198167e-09,  1.15781457e-11,
5.98448020e-10,  7.62538567e-10, -3.34791894e-10,  2.09154085e-09,
-9.69165282e-09,  3.13748888e-07,  1.39656428e-08,  1.06291052e-07,
-1.02960848e-09, -4.02629240e-08, -5.12207496e-09, -2.35577170e-08,
-7.67404862e-09,  4.12983012e-07, -4.50957786e-08, -1.05696919e-07,
2.31956144e-07,  7.04022592e-08, -1.08492475e-07,  1.24783429e-07,
2.71902320e-09, -1.61937872e-07, -9.84415425e-07,  2.51440901e-06,
4.71859834e-07, -1.83787883e-06,  2.26904044e-06,  2.30756385e-06,
2.59613183e-08, -1.47849810e-06,  2.10055145e-06,  6.36620798e-06,
5.07822972e-05, -9.61275634e-05,  6.98867889e-05, -8.51347890e-06,
1.57220239e-07,  7.99751574e-07,  1.23697267e-06, -2.38236388e-05,
-1.93284613e-04,  2.26836106e-04,  1.53056342e-03, -2.79690334e-03,
3.85162016e-07,  2.49435715e-06,  1.72617934e-05,  6.75480713e-05,
1.86852337e-04, -8.19147387e-04,  3.51759127e-03, -2.69152871e-02,
-9.85703154e-08, -8.89183718e-06, -2.27510752e-06, -1.84363497e-04,
1.08454812e-03,  7.39381445e-04,  1.23762385e-02, -1.69108255e-01,
1.00000000e+00,  1.46574027e-01,  3.21775142e-02,  3.37252308e-03,
-3.95384147e-04, -9.34163712e-06, -6.71944560e-06, -5.71744541e-06,
-3.26525689e-08,  1.77819901e-01, -7.44424534e-02,  2.23248730e-02,
2.65415385e-03,  1.80998271e-03, -1.30664824e-04, -8.43617929e-06,
-3.89414728e-06,  5.57546081e-09,  1.02865084e-02, -8.18026034e-03,
5.66761404e-03, -1.31001973e-03,  2.62465089e-04,  6.43734316e-05,
1.33621982e-05,  5.36062778e-06, -7.24080267e-09, -6.25996637e-04,
-9.63928735e-04,  2.24627127e-03,  1.29462188e-04, -2.89083222e-04,
-4.80199147e-05,  4.83393961e-07,  1.86304720e-06,  3.51673755e-08,
-7.39784472e-05, -1.20455980e-06,  1.33065533e-04, -1.00928062e-04,
2.10783287e-05, -1.88945166e-06,  3.02706594e-06, -8.86113554e-07,
-1.89353515e-08, -7.34583957e-07,  1.93947071e-06, -4.67325776e-07,
-7.75147011e-06, -2.87567559e-06,  1.80781398e-06, -5.09827848e-07,
-1.78266735e-07, -1.18923982e-08, -5.68869627e-08,  1.25000427e-08,
5.41917096e-08, -1.37332321e-07, -5.66409211e-08, -5.20473783e-07,
1.15097113e-07,  2.06848364e-07, -4.72606265e-10, -1.46048584e-09,
-8.04878528e-09, -6.15637233e-09,  4.57945310e-09,  1.15110451e-08,
-2.82079813e-08,  1.22074199e-07,  3.29367098e-07, -5.75550975e-09,
4.85724474e-10,  1.33740464e-10,  1.12301132e-09,  5.03724405e-10,
-1.00036207e-09, -3.11704691e-09,  1.05279515e-08, -2.91851776e-09,
-9.49737694e-09);
const float Z_lmn[144] = float[144](7.65720674e-10,  6.62871169e-10,  7.18948755e-10, -1.47443878e-09,
3.66547873e-11, -5.51080005e-10, -5.60799830e-10, -1.77386760e-09,
-6.09349682e-10, -1.68692239e-08, -9.89383237e-09, -1.45336904e-08,
-2.54608947e-09, -7.02582867e-09, -9.96327537e-09, -6.43482283e-08,
-2.60991139e-07,  1.99356164e-08, -1.36833195e-09,  3.67265830e-08,
4.15785385e-08,  1.22119532e-07,  4.54762717e-07,  3.93834429e-07,
-1.97953801e-08, -6.81919916e-07,  4.31804802e-09,  6.01380792e-07,
-4.86424564e-07, -7.94369391e-07,  3.43368612e-06,  2.63741597e-06,
3.93065879e-06, -6.55538215e-07, -5.73924483e-07,  3.97904589e-08,
1.00579941e-04,  1.25272837e-05, -1.92294845e-04,  9.42856852e-05,
2.48246738e-05,  8.57362824e-07, -2.22571851e-06,  1.02265387e-06,
-3.37717337e-08,  4.36655088e-04,  9.21928994e-04, -1.74969336e-03,
1.60030270e-04,  6.46123690e-05,  2.37100760e-05,  1.16503726e-05,
-3.81121130e-06,  6.09594006e-08, -8.75887959e-03,  1.01960865e-02,
-7.72425101e-03,  6.59392564e-04,  6.20666079e-05,  4.11541971e-05,
-1.26793847e-05, -3.34110718e-06,  5.82871897e-08, -1.19538411e-01,
3.73991125e-02,  1.49923262e-04,  6.01298676e-04, -6.09080866e-04,
-1.08116295e-04,  1.15486369e-05, -6.50855062e-06,  1.19436599e-07,
5.56912661e-07,  5.39801081e-06,  1.11708113e-06, -7.08967072e-05,
-2.54957311e-04, -7.59224353e-03, -2.66043301e-02, -2.43134411e-01,
-7.01405125e-08,  1.25174453e-06, -4.33920011e-06,  6.81344061e-05,
2.18632148e-05, -1.55991149e-03, -3.68738471e-03, -1.37251531e-01,
2.23868453e-08,  2.73980913e-07,  2.04420217e-05, -2.61126470e-05,
7.56602964e-05, -1.04675930e-04,  6.26299319e-03, -2.71514905e-02,
8.47996662e-08,  1.28734029e-06, -8.64403837e-06, -1.28135242e-05,
3.48271809e-05, -7.12939754e-05,  1.08227325e-03, -2.54318277e-03,
1.58909228e-07, -1.77298633e-06,  1.16567790e-06,  4.50914917e-06,
-6.73961141e-08, -7.36700710e-05,  1.34885488e-04, -4.71035659e-05,
-6.56407458e-09,  9.59318229e-07, -2.92805963e-07, -2.85236541e-06,
1.28280499e-06,  1.38450632e-07,  9.79890228e-08,  1.67842310e-06,
1.87408821e-08,  8.14576075e-07, -2.22205576e-07,  1.26461848e-08,
-6.23287197e-08, -2.23821039e-08, -2.05449414e-08, -4.73413536e-09,
-1.22358660e-08,  1.89191380e-07,  2.87169603e-08,  3.60284676e-08,
-2.67443793e-08, -4.66740127e-08, -9.82259289e-09, -1.57307494e-08,
1.84015155e-09,  2.38353049e-09, -1.59345771e-10,  4.66307966e-10,
-2.84701456e-09,  2.27888573e-10, -1.43216641e-10, -1.21659566e-10);

const ivec2 R_modes[145] = ivec2[145](
    ivec2(-8, -8),
    ivec2(-7, -8),
    ivec2(-6, -8),
    ivec2(-5, -8),
    ivec2(-4, -8),
    ivec2(-3, -8),
    ivec2(-2, -8),
    ivec2(-1, -8),
    ivec2(-8, -7),
    ivec2(-7, -7),
    ivec2(-6, -7),
    ivec2(-5, -7),
    ivec2(-4, -7),
    ivec2(-3, -7),
    ivec2(-2, -7),
    ivec2(-1, -7),
    ivec2(-8, -6),
    ivec2(-7, -6),
    ivec2(-6, -6),
    ivec2(-5, -6),
    ivec2(-4, -6),
    ivec2(-3, -6),
    ivec2(-2, -6),
    ivec2(-1, -6),
    ivec2(-8, -5),
    ivec2(-7, -5),
    ivec2(-6, -5),
    ivec2(-5, -5),
    ivec2(-4, -5),
    ivec2(-3, -5),
    ivec2(-2, -5),
    ivec2(-1, -5),
    ivec2(-8, -4),
    ivec2(-7, -4),
    ivec2(-6, -4),
    ivec2(-5, -4),
    ivec2(-4, -4),
    ivec2(-3, -4),
    ivec2(-2, -4),
    ivec2(-1, -4),
    ivec2(-8, -3),
    ivec2(-7, -3),
    ivec2(-6, -3),
    ivec2(-5, -3),
    ivec2(-4, -3),
    ivec2(-3, -3),
    ivec2(-2, -3),
    ivec2(-1, -3),
    ivec2(-8, -2),
    ivec2(-7, -2),
    ivec2(-6, -2),
    ivec2(-5, -2),
    ivec2(-4, -2),
    ivec2(-3, -2),
    ivec2(-2, -2),
    ivec2(-1, -2),
    ivec2(-8, -1),
    ivec2(-7, -1),
    ivec2(-6, -1),
    ivec2(-5, -1),
    ivec2(-4, -1),
    ivec2(-3, -1),
    ivec2(-2, -1),
    ivec2(-1, -1),
    ivec2(0,  0),
    ivec2(1,  0),
    ivec2(2,  0),
    ivec2(3,  0),
    ivec2(4,  0),
    ivec2(5,  0),
    ivec2(6,  0),
    ivec2(7,  0),
    ivec2(8,  0),
    ivec2(0,  1),
    ivec2(1,  1),
    ivec2(2,  1),
    ivec2(3,  1),
    ivec2(4,  1),
    ivec2(5,  1),
    ivec2(6,  1),
    ivec2(7,  1),
    ivec2(8,  1),
    ivec2(0,  2),
    ivec2(1,  2),
    ivec2(2,  2),
    ivec2(3,  2),
    ivec2(4,  2),
    ivec2(5,  2),
    ivec2(6,  2),
    ivec2(7,  2),
    ivec2(8,  2),
    ivec2(0,  3),
    ivec2(1,  3),
    ivec2(2,  3),
    ivec2(3,  3),
    ivec2(4,  3),
    ivec2(5,  3),
    ivec2(6,  3),
    ivec2(7,  3),
    ivec2(8,  3),
    ivec2(0,  4),
    ivec2(1,  4),
    ivec2(2,  4),
    ivec2(3,  4),
    ivec2(4,  4),
    ivec2(5,  4),
    ivec2(6,  4),
    ivec2(7,  4),
    ivec2(8,  4),
    ivec2(0,  5),
    ivec2(1,  5),
    ivec2(2,  5),
    ivec2(3,  5),
    ivec2(4,  5),
    ivec2(5,  5),
    ivec2(6,  5),
    ivec2(7,  5),
    ivec2(8,  5),
    ivec2(0,  6),
    ivec2(1,  6),
    ivec2(2,  6),
    ivec2(3,  6),
    ivec2(4,  6),
    ivec2(5,  6),
    ivec2(6,  6),
    ivec2(7,  6),
    ivec2(8,  6),
    ivec2(0,  7),
    ivec2(1,  7),
    ivec2(2,  7),
    ivec2(3,  7),
    ivec2(4,  7),
    ivec2(5,  7),
    ivec2(6,  7),
    ivec2(7,  7),
    ivec2(8,  7),
    ivec2(0,  8),
    ivec2(1,  8),
    ivec2(2,  8),
    ivec2(3,  8),
    ivec2(4,  8),
    ivec2(5,  8),
    ivec2(6,  8),
    ivec2(7,  8),
    ivec2(8,  8)
);

const ivec2 Z_modes[144] = ivec2[144](
    ivec2(0, -8),
    ivec2(1, -8),
    ivec2(2, -8),
    ivec2(3, -8),
    ivec2(4, -8),
    ivec2(5, -8),
    ivec2(6, -8),
    ivec2(7, -8),
    ivec2(8, -8),
    ivec2(0, -7),
    ivec2(1, -7),
    ivec2(2, -7),
    ivec2(3, -7),
    ivec2(4, -7),
    ivec2(5, -7),
    ivec2(6, -7),
    ivec2(7, -7),
    ivec2(8, -7),
    ivec2(0, -6),
    ivec2(1, -6),
    ivec2(2, -6),
    ivec2(3, -6),
    ivec2(4, -6),
    ivec2(5, -6),
    ivec2(6, -6),
    ivec2(7, -6),
    ivec2(8, -6),
    ivec2(0, -5),
    ivec2(1, -5),
    ivec2(2, -5),
    ivec2(3, -5),
    ivec2(4, -5),
    ivec2(5, -5),
    ivec2(6, -5),
    ivec2(7, -5),
    ivec2(8, -5),
    ivec2(0, -4),
    ivec2(1, -4),
    ivec2(2, -4),
    ivec2(3, -4),
    ivec2(4, -4),
    ivec2(5, -4),
    ivec2(6, -4),
    ivec2(7, -4),
    ivec2(8, -4),
    ivec2(0, -3),
    ivec2(1, -3),
    ivec2(2, -3),
    ivec2(3, -3),
    ivec2(4, -3),
    ivec2(5, -3),
    ivec2(6, -3),
    ivec2(7, -3),
    ivec2(8, -3),
    ivec2(0, -2),
    ivec2(1, -2),
    ivec2(2, -2),
    ivec2(3, -2),
    ivec2(4, -2),
    ivec2(5, -2),
    ivec2(6, -2),
    ivec2(7, -2),
    ivec2(8, -2),
    ivec2(0, -1),
    ivec2(1, -1),
    ivec2(2, -1),
    ivec2(3, -1),
    ivec2(4, -1),
    ivec2(5, -1),
    ivec2(6, -1),
    ivec2(7, -1),
    ivec2(8, -1),
    ivec2(-8,  0),
    ivec2(-7,  0),
    ivec2(-6,  0),
    ivec2(-5,  0),
    ivec2(-4,  0),
    ivec2(-3,  0),
    ivec2(-2,  0),
    ivec2(-1,  0),
    ivec2(-8,  1),
    ivec2(-7,  1),
    ivec2(-6,  1),
    ivec2(-5,  1),
    ivec2(-4,  1),
    ivec2(-3,  1),
    ivec2(-2,  1),
    ivec2(-1,  1),
    ivec2(-8,  2),
    ivec2(-7,  2),
    ivec2(-6,  2),
    ivec2(-5,  2),
    ivec2(-4,  2),
    ivec2(-3,  2),
    ivec2(-2,  2),
    ivec2(-1,  2),
    ivec2(-8,  3),
    ivec2(-7,  3),
    ivec2(-6,  3),
    ivec2(-5,  3),
    ivec2(-4,  3),
    ivec2(-3,  3),
    ivec2(-2,  3),
    ivec2(-1,  3),
    ivec2(-8,  4),
    ivec2(-7,  4),
    ivec2(-6,  4),
    ivec2(-5,  4),
    ivec2(-4,  4),
    ivec2(-3,  4),
    ivec2(-2,  4),
    ivec2(-1,  4),
    ivec2(-8,  5),
    ivec2(-7,  5),
    ivec2(-6,  5),
    ivec2(-5,  5),
    ivec2(-4,  5),
    ivec2(-3,  5),
    ivec2(-2,  5),
    ivec2(-1,  5),
    ivec2(-8,  6),
    ivec2(-7,  6),
    ivec2(-6,  6),
    ivec2(-5,  6),
    ivec2(-4,  6),
    ivec2(-3,  6),
    ivec2(-2,  6),
    ivec2(-1,  6),
    ivec2(-8,  7),
    ivec2(-7,  7),
    ivec2(-6,  7),
    ivec2(-5,  7),
    ivec2(-4,  7),
    ivec2(-3,  7),
    ivec2(-2,  7),
    ivec2(-1,  7),
    ivec2(-8,  8),
    ivec2(-7,  8),
    ivec2(-6,  8),
    ivec2(-5,  8),
    ivec2(-4,  8),
    ivec2(-3,  8),
    ivec2(-2,  8),
    ivec2(-1,  8)
);



float map_sdf0(in vec3 p)
{
    float zeta = (atan(p.y, p.x) * 2.0);
    vec2 r_prime = vec2((R_lmn[64] - length(p.xy)), p.z);
    float theta = atan(r_prime.y, r_prime.x);


    float m_basis[17] = float[17](
        sin(8.0 * theta),
        sin(7.0 * theta),
        sin(6.0 * theta),
        sin(5.0 * theta),
        sin(4.0 * theta),
        sin(3.0 * theta),
        sin(2.0 * theta),
        sin(theta),
        0.0,
        cos(theta),
        cos(2.0 * theta),
        cos(3.0 * theta),
        cos(4.0 * theta),
        cos(5.0 * theta),
        cos(6.0 * theta),
        cos(7.0 * theta),
        cos(8.0 * theta)
    );

    float n_basis[17] = float[17](
        sin(8.0 * zeta),
        sin(7.0 * zeta),
        sin(6.0 * zeta),
        sin(5.0 * zeta),
        sin(4.0 * zeta),
        sin(3.0 * zeta),
        sin(2.0 * zeta),
        sin(zeta),
        0.0,
        cos(zeta),
        cos(2.0 * zeta),
        cos(3.0 * zeta),
        cos(4.0 * zeta),
        cos(5.0 * zeta),
        cos(6.0 * zeta),
        cos(7.0 * zeta),
        cos(8.0 * zeta)
    );

    vec2 r = vec2(0.0, 0.0);
    for(int i=0; i<R_modes.length(); i++) {
        ivec2 mode = R_modes[i] + 8;
        r.y += R_lmn[i] * m_basis[mode.x] * n_basis[mode.y];
    }
    for(int i=0; i<Z_modes.length(); i++) {
        ivec2 mode = Z_modes[i] + 8;
        r.y += Z_lmn[i] * m_basis[mode.x] * n_basis[mode.y];
    }

    return length(r_prime) - length(r);
}

vec3 calcNormal_sdf0( in vec3 pos )
{
    vec2 e = vec2(1.0,-1.0);
    // const float eps = 0.0005;
    return normalize( e.xyy*map_sdf0( pos + e.xyy*_stopEpsilon ) + 
					  e.yyx*map_sdf0( pos + e.yyx*_stopEpsilon ) + 
					  e.yxy*map_sdf0( pos + e.yxy*_stopEpsilon ) + 
					  e.xxx*map_sdf0( pos + e.xxx*_stopEpsilon ) );
}


vec4 mainImage( in vec2 fragCoord )
{
    vec3 cam_norm = normalize(_lookingAt - _camPose);
    vec3 cam_right = normalize(cross(cam_norm, _camUp));
    vec3 cam_down = normalize(cross(cam_right, cam_norm));
    float fy = (_fx / _iResolution.x) * _iResolution.y;

    vec2 normalized_coord = (fragCoord / _iResolution) - 0.5;
    normalized_coord.x = normalized_coord.x * _fx;
    normalized_coord.y = normalized_coord.y * fy;

    vec3 p0 = cam_right * normalized_coord.x + cam_down * normalized_coord.y;
    p0 += _camPose;


    // raymarch
    int closest_object = -1;
    float closest_dist = _tmax;
    float t = 0.0;
    float h = 0.0;
    vec3 pos;
    
    t = 0.0;
    for( uint i=0u; i<_maxSteps; i++ )
    {
        pos = p0 + t*cam_norm;
        h = map_sdf0(pos);
        t += h;
        if (t>closest_dist) break;
        if( abs(h)<_stopEpsilon ) {
            closest_object = 0;
            closest_dist = t;
        }
    }
    

    vec3 nor;
    switch(closest_object)
    {
        case -1:
            break;
        
        case 0:
            nor = calcNormal_sdf0(p0 + closest_dist*cam_norm);
            break;
           
    }

    vec4 color = vec4(0.0);
    if( closest_object != -1 ) {
        color.w = 1.0;
        float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 ) * 0.2;
        float amb = 1.4 + 0.3*dot(nor,vec3(0.0,1.0,0.0));
        // color.xyz = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;
        // color.xyz = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;
        color.xyz = clamp(sdf_colors[closest_object], 0.1, 0.9) * amb + vec3(0.8,0.7,0.5)*dif*0.2;
    }

    return color;
}

void main() {
    fragColor = mainImage(gl_FragCoord.xy);
}
